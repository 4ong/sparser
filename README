
****************
* Introduction *
****************

Sparser is a architecture for analyzing English text. 
It handles text of any length and employs a fast, efficient, 
constant-time algorithm designed for use with semantic grammars.
See McD-Sparser-ANLP-92.pdf in the paper's directory of 
the documentation.  

Sparser can use context-free and context-sensitive semantic
grammar phrase-structure rules, along with syntactic rules
that check for valid semantic relations before they complete.
It provides hooks for regular-expression analysis, multi-words, 
and arbitrary state-based code.

Sparser comes 'out of the box' with just a minimal grammar 
of function words and access to grammar modules that have 
already been developed for core notions like amounts and time 
and for some sublanguages. 

There is extensive documentation for Sparser included with 
the code base. We regularly extend this documentation, 
especially with 'notes' that provide a guide that is very
close to the implemenation.

Sparser is written in Lisp, and until we restore some form
of the interactive workbench it had on earlier versions of
the Mac, using Sparser requires that you have a working knowledge
of Lisp and are comforable reading code. 

Note that as of this writing, the primary Sparser developers
are using it as a component within DPARPA


*************************
* How to install & run  *
* Version of 8/23/15    *
*************************

Thank you for downloading Sparser. This short guide
will help you get everything up & running in no time.


Installation & Setup
====================

When you checkout the master repository, it should contain four
immediate subdirectories: "Mumble", "Sparser", "util", and "test",
as well as this README file, the LICENSE file, and the "sparser.asd"
file which contains the Sparser ASDF system definitions.

Loading Sparser
====================

You need to have a modern implementation of Common Lisp
already installed. Sparser has been primarily tested on 
Intel-based Mac OS X using Clozure (www.clozure.com) and
Allegro (www.franz.com). It also runs under SBCL though
there are a few incompatibilities that remain to be
worked through.

We recommend Clozure because it automatically compiles 
functions as it loads them. If you use Allegro, you will
need to explicitly compile the core of Sparser to avoid
blowing out the stack on a text longer than about 30 words,
see sparser/Sparser/init/scripts/compile-everything.lisp.

1. Start Lisp.

2. Load Sparser using ASDF; e.g., run
  (asdf:load-system :sparser).

3. Switch over to the Sparser namespace by executing
  (in-package :sparser).

4. Test that Sparser is working properly & that it can
parse a simple phrase. Execute (p "10 hours."). 
Note that right now you need to include the period.

Your output should look something like this:
====================
? (p "10 hours.")
[10 hours]

                    source-start
e3    AMOUNT-OF-TIME  1 "10 hours" 3
                    period
                    end-of-source
:done-printing
====================

If so, congratulations -- Sparser is working. Check out
the documentation in "~/sparser/Sparser/documentation" to
see how you can start writing your own grammars.

