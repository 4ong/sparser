
****************
* Introduction *
****************

Sparser is a architecture for analyzing English text. 
It handles text of any length and employs a fast, efficient, 
constant-time algorithm designed for use with semantic grammars.

Sparser can use context-free and context-sensitive semantic
grammar phrase-structure rules, along with syntactic rules
that check for valid semantic relations before they complete.
It provides hooks for regular-expression analysis, multi-words, 
and arbitrary state-based code.

Sparser comes 'out of the box' with just a minimal grammar 
of function words and access to grammar modules that have 
already been developed for core notions like amounts and time 
and for some sublanguages. 

There is extensive documentation for Sparser included with 
the code base. We regularly extend this documentation, 
especially with 'notes' that provide a guide that is very
close to the implemenation.

Sparser is written in Lisp, and until we restore some form
of the interactive workbench it had on earlier versions of
the Mac, extending Sparser's abilities and understanding
its operation requires you to have a working knowledge
of Lisp and are comforable reading code.

As this is written, Sparser's grammar and semantic models
are being constantly extended and revised by its committers
as part of several R&D projects. As a consequence it is
inevitable that bugs will creep in and analyses change.
We try to keep this under control by factoring what parts
of Sparser's engine, semantic/grammar modules are loaded,
and what analysis protocols are used.


*************************
* How to install & run  *
* Version of 5/23/16    *
*************************

Thank you for downloading Sparser. This short guide
will help you get everything up & running in no time.


Installation & Setup
====================

After cloning Sparser, the toplevel of the sparser directory
tree will have four immediate subdirectories: "Mumble",
"Sparser", "util", and "test", as well as this README file,
the LICENSE file, and the "sparser.asd" file which contains
the Sparser ASDF system definitions.

Loading Sparser
====================

You need to have a modern implementation of Common Lisp
already installed. Sparser runs in SBCL (sbcl.org),
Clozure (www.clozure.com) and Allegro (www.franz.com).
We develop primarily on Intel-based Macs under OS X and XXXXXX Alex XXXX
Sparser has been used with Windows in the past. Now that we
are using ASDF for toplevel loading and Lisp pathnames for
handling file compilation and module loading we don't expect
that loading and running in Windows would be problem, but
as of this writing we have not actually tested it.

1. Setup ASDF

You need is to have ASDF loaded and Sparser's location included in its
source registry so that ASDF can locate the .asd file. This example
assumes that your local copy of Sparser is at toplevel in your home
directory.

(require :asdf)
(asdf:initialize-source-registry
 '(:source-registry
    (:tree (:home "sparser"))
       :inherit-configuration))

That specification never changes so we include it as part of our
Lisp init files.

1. Start Lisp.

2. Load Sparser using ASDF; e.g., run
  (asdf:load-system :sparser).

3. Switch over to the Sparser namespace by executing
  (in-package :sparser).

4. Test that Sparser is working properly & that it can
parse a simple phrase. Execute (p "10 hours."). 
Note that right now you need to include the period.

Your output should look something like this:
====================
? (p "10 hours.")
[10 hours]

                    source-start
e3    AMOUNT-OF-TIME  1 "10 hours" 3
                    period
                    end-of-source
:done-printing
====================

If so, congratulations -- Sparser is working. Check out
the documentation in "~/sparser/Sparser/documentation" to
see how you can start writing your own grammars.

