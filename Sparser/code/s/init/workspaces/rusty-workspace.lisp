;;; -*- Mode:LISP; Syntax:Common-Lisp; Package:(SPARSER COMMON-LISP) -*-
;;; Copyright (c) 2014-2015 SIFT LLC. All Rights Reserved
;;;
;;;    File: "rusty-workspace"
;;;  Module: "init/workspaces/
;;; version: May 2015

;;remove (bio-traps) and (bf-on) in (rusty) -- no longer defined
;; 7/19/2015 Code to load all the sentences in the 1000 articles and search for patterns like no-space 
;;  words with dashes (or slashes)
;; add new utility methods for understanding non-card producing articles
;; ras2-proteins-in-sentences  show-sentences r2-proteins-in (n)


(in-package :sparser)

(defparameter *dli-counts* (make-hash-table))
(defparameter *dli-examples* (make-hash-table))
(defparameter *max-all-supers* 0)
(defparameter *total-all-supers* 0)
(defparameter *m-all-subs* nil)


(defun show-dli-stats ()
  (declare (special *dli-counts* *dli-examples*))
  (clrhash *dli-counts*)
  (setq *dli-examples* (make-hash-table))
  (maphash #'(lambda (k v)(incf (gethash (length (indiv-old-binds v)) *dli-counts* 0))) *lattice-ht*)
  (maphash #'(lambda (k v)(push v (gethash (length (indiv-old-binds v)) *dli-examples*))) *lattice-ht*)
  (loop for i from 0 to 10 do (print (list i (gethash i *dli-counts*))))
  (setq *max-all-supers* 0)
  (setq *total-all-supers* 0)
  (maphash #'(lambda (k v)
	       (when (> (hash-table-count (indiv-all-supers v)) *max-all-supers*)
		 (setq *max-all-supers* (hash-table-count (indiv-all-supers v))))
	       (incf *total-all-supers* (hash-table-count (indiv-all-supers v)))
	       )
	   *lattice-ht*)
  (print `(*max-all-supers*
	   ,*max-all-supers*
	   *av-all-supers*
	   ,(/ *total-all-supers* (+ 0.0 (hash-table-count *lattice-ht*)))
	   )))

(defun bind-vars (i)
  (loop for b in (indiv-old-binds i)
     collect (var-name (binding-variable b))))

(defparameter *bv-ht* (make-hash-table :test #'equal))
(defparameter *nbv-ht* (make-hash-table :test #'equal))

(defun all-bvs ()
  (maphash #'(lambda (k v)
	       (incf (gethash (bind-vars v) *bv-ht* 0)))
	   *lattice-ht*)
  (maphash #'(lambda (k v)
	       (pushnew (bind-vars v)
			(gethash (norm-bv (bind-vars v)) *nbv-ht*)
			:test #'equal))
	   *lattice-ht*)
  (hal *nbv-ht*))

(defun norm-bv (bv)
  (sort bv #'string< ))


(defun rusty()
  (setup-bio) ;; load the bio model etc.
  ;;(bio-traps) ;; turn off forest level parsing and this presently problematic parameter

  (bio-setting)
  (setq *kind-of-chart-processing-to-do* :successive-sweeps)
  (what-to-do-with-unknown-words :capitalization-digits-&-morphology/or-primed)

  ;;(load "~/sparser/Sparser/code/s/grammar/rules/words/one-offs/comlex-def-forms.lisp")
  ;;(setq *trace-treetops-sweep* t)

  ;;(ddm-ed "drivers/forest/sweep.lisp")
  ;;(ddm-ed "drivers/chart/psp/pts5.lisp")
  ;;(ddm-ed "grammar/rules/syntax/categories.lisp")
  ;;(ddm-ed "drivers/chart/psp/chunker.lisp")
  ;;(ddm-ed "drivers/forest/new-forest-protocol.lisp")
  ;;(ddm-ed "drivers/forest/sweep.lisp")
  (ddm-ed "drivers/chart/psp/no-brackets-protocol.lisp")
  ;;(ddm-ed "grammar/rules/syntax/syntactic-rules.lisp")
  ;;(ddm-ed "objects/traces/psp1.lisp")
  ;;(ddm-ed "objects/traces/DA.lisp")
  (ddm-ed "objects/traces/treetops.lisp")
  (ddm-ed "grammar/model/sl/biology/verbs1.lisp")
  (ddm-ed "grammar/model/sl/biology/terms1.lisp")
  (ddm-ed "grammar/model/sl/biology/taxonomy.lisp")
  ;;(ddm-ed "grammar/model/sl/biology/drugs.lisp")
  ;;(ddm-ed "init/workspaces/Biology-workspace.lisp")
  (ddm-ed "grammar/model/sl/biology/cureRAS/December-text-passages.lisp")
 
  ;;  (setq *trace-network-flow* t)
  ;;(bf-on)
  (ddm-load "grammar/model/sl/biology/cureRAS/December-text-passages.lisp")
  (ddm-load "grammar/model/sl/biology/cureRAS/erk-translocation.lisp")
  (ddm-load "grammar/model/sl/biology/cureRAS/aspp2-whole.lisp")
  (ddm-load "grammar/model/sl/biology/cureRAS/load-test-sents.lisp")
  (ddm-ed "grammar/model/sl/biology/cureRAS/load-test-sents.lisp")

  (trace-lexicon-unpacking) 
  (trace-morphology)
  ;;(setq *do-anaphora* nil)
  (setq *note-text-relations* nil)
)

(defun pos (n)(chart-array-cell n))
(defun np (l &optional (stream t))
  (loop for ll in l do (print ll stream)))
(defun ht-to-alist (ht)
  (let
      ((alist nil))
    (maphash #'(lambda(l h) (push (list l h) alist)) ht)
    (sort alist #'(lambda (x y)(string< (format nil "~s" x)(format nil "~s" y))) :key #'car)))

(defun show-brackets (end)
  (np 
   (loop for i from 1 to end
	 collect
	 (list
	  i
	  (ev-boundary (pos-ends-here (pos (- i 1))))
	  (ev-boundary (pos-starts-here (pos i)))
	  (pos-terminal (pos i))
	  )))
  )

#+ignore ;; now just use CCL file search
(defun caller-tree (fn &optional (levels 3) seen)
  (let
      ((callers
	(loop for xref in (get-relation :direct-calls :wild  fn)
	      collect
	      (xref-entry-name xref))))
    (cons
     fn
     (if (> levels 0)
	 (loop for caller in callers 
	       collect
	       (if (memq caller seen)
		   (list caller "...")
		 (progn
		   (setq seen (cons caller seen))
		   (caller-tree caller (- levels 1) seen)))
	       )))
    )
  )

#+ignore ;; for cross-ref -- now just use search through files
(defun call-tree (fn &optional (levels 3) seen)
  (let
      ((called
	(loop for xref in (get-relation :direct-calls  fn :wild)
	      collect
	      (xref-entry-name xref))))
    (cons
     fn
     (if (> levels 0)
	 (loop for callee in called 
	       collect
	       (if (memq callee seen)
		   (list callee "...")
		 (progn
		   (setq seen (cons callee seen))
		   (call-tree callee (- levels 1) seen))))
       )
     )
    )
  )

#||
*bracketing-progress* has a list of bracket positions
||#

#||
(analysis-core...)
(chart-based-analysis)
(lookup-the-kind-of-chart-processing-to-do)
(inititate-top-edges-protocol)
(check-word-level-fsa-trigger ss p0)
(check-PNF-and-continue word position-before)
(continuation-after-pnf-returned-nil word position-before)
(introduce-right-side-brackets
        word (chart-position-after position-before))
   (introduce-trailing-brackets word position-after)
   (check-for-]-from-prior-word position-after word)
      (check-for-[-from-prior-word position-after prior-word))
          ([-on-position-because-of-word? position-after prior-word)
          (adjudicate-new-open-bracket [ position-after)
          (scan-next-pos position-after)            ;;; Main line of the control network

            ;; Called from Scan-and-assess
             ;; Intended to be the only means of advancing through the chart.
             ;; Always working at the chart's right-fringe.
             ;; Does its own calls to Add-terminal to keep the chart always
             ;;  full one position out.
          (scan-next-position)     --->> scan3.lisp
            (add-terminal-to-chart)
            (continue-scan-next-pos position))
                (introduce-leading-brackets word position)     ---------> place-brackets1.lisp
                       (place-boundary/ends-before label position-before ends-before) ;; update the ending bracket at this position
                            (place-boundary/begins-before label position-before begins-before))
                       (place-boundary/begins-before label position-before begins-before));; update the endingbeginning bracket at this position
                  ;;  has trace "[scan] introduce-leading-brackets \"~A\""
                (check-for-]-from-word-after word position)))



||#

(defun all-words ()
  (let
      ((words nil))
    (do-symbols (s *word-package*) (push s words))
    words))

(defun wrs (w)
  (let
      ((wrs
        (cond
         ((symbolp w)
          (and (boundp w) (word-p (eval w))
               (word-rule-set (eval w))))
         ((word-p w)
          (word-rule-set w)))))
    (and
     wrs
     (rule-set-p wrs)
     wrs)))


(defun all-rule-words ()
  (loop for w in (all-words)
    when 
    (wrs w)
    collect w))

(defun rls (w)
  (and (wrs w)
       (or
        (rs-right-looking-ids (wrs w))
        (rs-fsa (wrs w)))))

#+ignore
(defun simple-parse (str)
  (setq chart (create-lexical-level-chart str)) ;; includes running FSA and other rewrite rules over the entire chart
  (setq bchart (bracketize chart)) ;; this is a chart with all the right bracket structures inserted
  (setq parsed-bracket-chart (parse-segments bchart))
  (setq forest-chart (process-forest parsed-bracket-chart)))

(defun all-sparser-functions ()
  (let*
      ((sfns (all-package-fns :sparser))
       (clfns (all-package-fns :cl))
       (clufns (all-package-fns :cl-user)))
    (loop for s in sfns
      unless (or (memq s clfns)(memq s clufns))
      collect s)))

(defun all-package-fns (packname)
  (let* ((pack (find-package packname))
         (fns nil))
    (do-symbols (s pack)
      (when (fboundp s) (push s fns)))
    fns))
      
(defun mark-examples ()
  (load "~/r3/code/integration/cycorp/aspp2-examples"))

#+:sbcl
(defvar *profns*)

#+:sbcl
(DEFPARAMETER *SP-FNS*
  '(FIND-ALL-SUBS
    CHECK-&-LOAD
    COMPILE-&-LOAD
    CATEGORY-NAMED
    GET-TAG
    INCLUDE-GRAMMAR-MODULE/EXPR
    CATEGORY-P
    MENTION-HISTORY
    POS-EDGE-STARTS-AT
    VAR-NAME
    GRAMMAR-MODULE-NAMED
    FIND-OR-MAKE-DLVV-FROM-VAR-VAL
    POS-EDGE-ENDS-AT
    SPARSER-LOGICAL-PATHNAME
    INTERESTING-SUPER?
    CLEAR
    CLEANOUT-EDGE-VECTOR-ARRAY
    PLIST-FOR
    NOTE-SURFACE-STRING
    CATEGORY-IDS
    FIND-OR-MAKE-LATTICE-DESCRIPTION-FOR-REF-CATEGORY
    COVERAGE-OVER-REGION
    DEALLOCATE-KONS
    INITIALIZE-EDGE-VECTOR
    GET-DLI
    INITIALIZE-DISCOURSE-HISTORY
    CHUNK-FORMS
    PENDING-DEFINITE-REFERENCES
    FIND-OR-MAKE-DLVV-HT-FROM-VARIABLE
    CHECK-FOR-COMPLETION-ACTIONS/CATEGORY
    SET-STATUS
    S-MENTION?
    CAT-NAME
    FIND-VARIABLE-IN-CATEGORY
    CONTEXTUAL-INTERPRETATION
    FORM-MULTIPLIER
    FIND-BINDINGS-VALUE-FOR-VAR
    BAD-EDGE?
    DISCOURSE-ENTRY
    TT-EDGES-STARTING-AT
    RULE-SET-FOR
    CHUNK-EV-LIST
    STARTS-POLYWORD
    INITIALIZE-TT-STATE-DESCRIPTION
    RECORD-OF-TT
    CATEGORY-NAMED/C-SYMBOL
    MULTIPLY-IDS
    EDGE-PRECEDES
    UPDATE-DEFINITE-DETERMINER
    CAPITALIZED-VERSION
    NEXT-INDEXICAL-NAME
    INITIALIZE-EDGE
    MENTION-SOURCE
    RULE-IS-FOR-A-VERB?
    RULE-LHS-FORM
    KCONS
    SET-DLI
    NON-PHRASAL-CLASSES
    CONTEXTUAL-DESCRIPTION
    PUSH-SUBCAT
    CHECK-KNOWN-WORD-FOR-WORD-FSAS
    DETERMINE-HEAD-REFERENT
    SUBSUMES-INTERVAL
    CHARACTER-ENTRY
    INSTANCE-COUNTER
    PRONOUN-CATEGORY?
    END-POS
    ENDS-AT-POS
    GET-BINDING-OF
    RULE-SET-WITH-RULES
    ONE-WORD-LONG?
    KNIT-EDGE-INTO-POSITIONS
    SET-SENTENCE-STATUS
    FORM-ALL-PAIRS
    RUN-REAL-PER-ARTICLE-INITIALIZATIONS
    CLEANUP-CALL-TO-CAPS-FSA
    COMPUTE-DECIMAL-VALUE
    LOOKUP-WORD-SYMBOL
    WHEN-BINDING-HOOK
    PLURAL-NOUN-AND-PRESENT-VERB?
    PUSH-BINDING-ONTO-INSTANCES-FIELD
    RIGHT-TREETOP-AT/ONLY-EDGES
    LISP-FILE
    ESTABLISH-CHARACTER-SOURCE/STRING
    PLACE-REFERENT-IN-LATTICE
    DECODE-VALUE-FOR-VAR/LIST
    SIMPLE-EOS-CHECK
    KTAIL-CONS
    INITIALIZE-FIELDS/INDIVIDUAL
    THE-NEXT-POSITION-TO-SCAN
    CONVERT-EDGE-TO-ONE-WORD-CHARACTERIZATION
    SYNTACTIC-RULE?
    CALL-COMPOSE
    PREPOPULATED?
    TR/EXPR
    CHECK-FORM-FORM
    DEFINITE-DETERMINER?
    PUSH-PREPOSITION
    VG-START?
    NUMBER-OF-TERMINALS-BETWEEN
    USE-SPECIALIZED-NG-PARSER?
    CHECK-RIGHT-FOR-FORM-RULE
    CHECK-VARIANTS-FOR-WORD-FSAS
    WORD-CAPITALIZATION
    LOSING-COMPETITION?
    EDGE-FOR-REFERENT
    RECORD-TT
    VALUE/VAR
    CHECK-RULE-FORM
    GET-SUBCATEGORIZATION
    LIKELY-VERB+ED-CLAUSE
    LOOP-THROUGH-SEGMENT-FOR-SOME-EDGES
    POS-CAPITALIZATION
    SAVE-CAT-STRING
    CREATE-SHADOW
    I-TYPE-OF
    INITIALIZE-SCAN-PATTERN-PROCESS
    EDGE-SPANNING
    LOGICAL-PATHNAME-CHAR-P
    ADJACENT-EDGES?
    SETUP-DA-ACTION-CONTEXT
    DA/LOOK-UNDER-EDGE/SCAN-EDGES
    ZERO-THE-DIGITS-ARRAY
    POSITION-PRECEDES
    COULD-BE-THE-START-OF-A-SENTENCE
    ALLOCATE-SENTENCE
    TRY-TO-STRIP-OFF-ING/WB
    EXPERIMENTAL-RESULTS
    CLEAR-TRAVERSAL-STATE
    CLEAR-CONTEXT-VARIABLES
    STOP-TIMER
    CLEANUP-LIFO-INSTANCE-LIST
    ANNOTATE-INDIVIDUAL
    SUBCAT-PATTERNS
    MAKE-A-PERMANENT-INDIVIDUAL
    MARK-OPEN-PAREN
    PUSH-BINDING-ONTO-BIND-IN-FIELD
    HAL
    FIND-OR-MAKE-CATEGORY-OBJECT
    PARENT
    MAXIMAL?
    ANALYZE-SEGMENT-LAYOUT
    SET-SUBJECT
    INITIALIZE-NL-POSITION-STACK
    SET-DISCOURSE-HISTORY
    SET-TT-COUNT
    SET-RELATIONS
    THERE-ARE-CONJUNCTIONS?
    CALL-REDISTRIBUTE-IF-APPROPRIATE
    PERIOD-MARKS-SENTENCE-END?
    RIGHT-EDGE-OF-TRIPLE
    INITIALIZE-DA-SEARCH
    PUSH-OF
    PW-CONTINUATIONS
    REFERENT-FROM-UNARY-RULE
    INDIVIDUALS-OF-THIS-CATEGORY-ARE-PERMANENT?
    LOOK-FOR-HYPHEN-AS-NEXT-TREETOP
    PREP?
    EXTRACT-STRING-FROM-CHAR-BUFFERS
    IS-PASSIVE?
    TOP-EDGE-AT/ENDING
    INITIAL-PATTERN-TRANSITION?
    PW-ACCEPT-STATE?
    APPLY-PREPOSITION-TO-COMPLEMENT
    LOCATION-IN-ARTICLE-OF-CURRENT-SENTENCE
    CHART-POSITION-BEFORE
    SETUP-TT-TYPE
    GET-SCLASS
    CHECK-SEGMENT-FINISHED-HOOK
    NG-START?
    LONG-TERM-IFY/EDGE-REFERENTS/AT
    WORD-NAMED
    CHUNK-HEAD?
    TREETOPS-BETWEEN
    ACCUMULATE-SPACES
    INCLUDES-STATE
    LEFT-TREETOP-AT/ONLY-EDGES
    ZERO-CATEGORY-INDEX
    UPDATE-MENTION-REFERENT
    WALK-DOWN-RIGHT-HEADLINE
    GENERALIZE-SEGMENT-EDGE-FORM-IF-NEEDED
    CALCULATE-MORPHOLOGY-OF-WORD/IN-BUFFER
    ALLOCATE-SECTION
    INITIALIZE-NEW-FLAGS
    EDGE-JUST-TO-LEFT-OF
    VALID-REFERENT?
    UPDATE-MENTION-LINKS
    KNOWN-SUBCAT-PATTERN
    PUNCTUATION-NAMED
    PUSH-LOOSE-NP
    CONTAINS-EXP-RESULT-PHRASE
    CONTAINS-KNOWN-RESULT-PHRASE
    PUSH-BINDING-ONTO-BINDS-FIELD
    PARSING-STATUS
    CONTAINS-NEW-FACT-PHRASE
    RESPAN-EDGE-AROUND-ADVERB-COMMA
    REDISTRIBUTE
    COMPOSE
    NON-DLI-MOD-FOR
    RESOURCE-STORE
    FILL-WHITESPACE
    GET-ANOTHER-COMMA-CHAIN-CONJ
    BEGIN-NEW-ARTICLE
    PRINC-CATEGORY
    SUCCESSIVE-TREETOPS
    NP-CONTAINING-MENTION?
    CONVERT-REFERENT-TO-INDIVIDUAL
    FIND-OR-MAKE-ASPECT-VECTOR
    QUANTIFIER-NOUN-COMPOUND
    MAKE-UNINDEXED-INDIVIDUAL
    WORD-IS-SPANNED?
    CHUNK-START-POS
    ADD-TO-DOCUMENT-SET
    ANALYZE-TEXT-FROM-STRING
    P
    LLOAD
    CREATE-PREDICATION-BY-BINDING
    VERB+ING-NOUN-COMPOUND
    COVER-SCARE-QUOTES
    APPLY-BINDINGS
    SF-ACTION/SPANNED-SEGMENT
    KNOWN-IN-CONTEXT
    SUITABLE-FOR-AND-IN-OBO
    SAVE-ARTICLE-SENTENCE
    RESET-EV-EDGES
    DEALLOCATED-INDIVIDUAL?
    PARENTHESES
    MAKE-NEXT-STATE
    TWO-HYPHEN-NS-PATTERNS
    AS-SPECIFIC?
    EDGE-OF-DOTTED-INTERMEDIARY
    DEREFERENCE-VARIABLE
    EV-EDGE-VECTOR
    CATEGORY-INHERITS-TYPE?
    SET-LINE-LENGTH-TO-ADJUST-TO
    SEE-IF-NEXT-TOKEN-EXTENDS-PATTERN/S
    PARENT-EDGE-FOR-REFERENT
    REF/HANDLE-HEAD-AND-BINDNGS
    POST-MVB-VERBS
    INDEX-OF-EDGE-IN-VECTOR
    APPLY-REALIZATION-SCHEMA-TO-INDIVIDUAL
    ALLOCATE-NEXT-INSTANCE
    BIO-COERCION-COMPATIBLE?
    SUPER-CATEGORIES-OF1
    SPAN-PARENTHESES
    MAKE-EDGE/ALL-KEYS
    SUBJECT
    I/R/S-MAKE-THE-RULE
    FIND-SUBCAT-VARIABLE
    CONDITION-ANAPHOR-EDGE
    SELECT-BEST-TRIPLE
    LATTICE-INDIVIDUALS-EXTEND-DH-ENTRY
    APPLY-SINGLE-CATEGORY-RDATA
    DO-JUST-TERMINAL-EDGES
    TRY-TO-RESOLVE-UNCOVERED-NS-EDGES
    NAME
    ADJACENT-SEGMENT-TTS
    DECODE-LIST-REFERENT-EXPRESSIONS
    AFTER-ANALYSIS-ACTIONS
    BOUND-PREPOSITIONS
    NOSPACE-HYPHEN-SPECIALIST
    RECORD-INSTANCE-WITHIN-SEQUENCE
    ATTACH-TRAILING-PARTICIPLE-TO-CLAUSE
    ATTACH-COMMMA-SUBJ-RELATIVE-TO-NP
    WORD-HAS-ASSOCIATED-CATEGORY
    DECODE-SUBTYPE
    EXPECT-DIGIT-DELIMITER-AS-NEXT-TREETOP
    NOUN-NOUN-COMPOUND
    VP-CATEGORY?
    POLYWORD-CHECK
    EXPAND-INTERPRETATION-IN-CONTEXT-IF-NEEDED
    WORD-TRAVERSAL-HOOK
    MAKE-PAIR-WITH-PROTEIN
    KNOWN-SUBCATEGORIZATION?
    DID-WE-FORGET-ANY-UNREAPED-INDIVIDUALS?
    DECODE-VALUE-FOR-VARIABLE
    DT-MENTION
    HAVING-STRIPPED-G-TRY-FOR-N
    EDGE-CATEGORY-TO-KEYWORD
    PARSE-BETWEEN-PARENTHESES-BOUNDARIES
    CONJUNCTIONS
    ARC-MATCHES-TT?
    ANNOTATE-REALIZATION/BASE-CASE
    PARSE-BETWEEN-NOSPACE-SCAN-BOUNDARIES
    FIND-BY-APPLY-BINDINGS
    POSSIBLY-PRINT-SENTENCE
    KNIT-INTO-PSG-TABLES
    CONVERT-CLAUSE-TO-REDUCED-RELATIVE
    POS-AFTER-IS-END-OF-SEQUENCE
    ASSIMILATE-SUBJECT-TO-VP-ED
    ADJOIN-PP-TO-VG
    SUR-STRING
    FIND-PREPOSITION
    FORM-RULE-COMPLETION/EXPLICIT-LHS
    MAKE-PROTEIN-COLLECTION
    INDEX/BINDING
    CHART-POSITION-AFTER
    ITYPEP-OR
    DEFINE-OR-FIND-INDIVIDUAL
    NOTE-CATEGORY-FOR-WORD
    DEALLOCATE-CONS-TREE
    CLEANUP-BINDINGS-FIELDS
    PRINT-INDIVIDUAL/NUMBER
    REVISE-EDGE
    NUMBER-WORD-FSA
    HANDLE-PARENTHESES
    INTERPRET-PRONOUN-IN-CONTEXT
    ONE-HYPHEN-NS-PATTERNS
    ADJACENT-TT-PAIRS1
    ALL-INDIVIDUALS-IN-TTS
    CONVERT-MIXED-PATTERN-EDGES-TO-LABELS
    DO-FSA/S-FOR-EDGE
    REINTERPRET-COLLECTION-WITH-MODIFIERS
    BASE-DESCRIPTION
    ADJOIN-TOCOMP-TO-VG
    MAKE-COPULAR-PP
    CANONICAL-REF-VAR
    REST-OF-SCAN-NEXT-POSITION
    INITIALIZE-STATE-OF-MORPHOLOGY-FSA
    PRIORITY-RULE?
    COMPUTE-NUMBER-VALUE-FROM-DIGITS-ARRAY
    EDGE-INTERACTION-WITH-QUIESCENCE-CHECK
    VALUE-OF/BINDING
    PRETERMINALS-FOR-KNOWN
    SET-USED-BY/ANONYMOUS-DAUGHTERS
    DO-FSA-FIELD
    RECORD-LEMMA
    INTERPRET-PP-ADJUNCT-TO-NP
    WHACK-A-RULE-CYCLE
    INCREMENT-LINE-COUNT
    OF-MENTIONS
    OLD-BIND-VARIABLE
    TOP-EDGE-AT/STARTING
    DO-PUNCTUATION
    CHECK-FOR-EXTENSION-FROM-VERTEX
    CHECK-CAPS-VARIATIONS
    MAKE-AN-INDIVIDUAL
    DEFINE-POLYWORD-ANY-WORDS
    PRETERMINAL-EDGES
    REF/FUNCTION
    MULT/IDS-ON-FORM-LABEL
    CHART-POSITION
    NS-PATTERN-DISPATCH
    LINK-TO-OTHER-PARENTS
    CHARACTERIZE-WORD-TYPE
    MAKE/BINDING
    ASSIMILATE-WHETHERCOMP
    KNOWN-RESULTS
    ATTACH-PP-TO-NP-WITH-COMMAS
    STORE-WORD-AND-HANDLE-IT-LATER
    TUCK-IN-JUST-ABOVE
    CHARACTERIZE-WORDS-IN-REGION
    ADJ-NOUN-COMPOUND
    VG-HEAD?
    CACHE-RNODE-ON-EDGE
    BASE-LAYOUT
    SET-DOCUMENT-INDEX
    NEW-PASS2
    EV-EDGES
    REVISE-PARENT-EDGE
    AFTER-ACTION-ON-SEGMENTS
    COMPARE-TO-SNAPSHOT
    BIND-VARIABLE/EXPR
    MAKE-WORD-SYMBOL
    REF/DAUGHTER
    SDM/ANALYZE-SEGMENT
    SWEEP-SENTENCE-TREETOPS
    LOOK-FOR-PREP-BINDERS
    ADD-TENSE/ASPECT-TO-SUBORDINATE-CLAUSE
    START-TIMER
    SET-INITIAL-STATE
    DETERMINER-NOUN
    CONJOIN-TWO-CLAUSES
    MAKE-THERE-EXISTS
    DLI-PARENT
    TRY-TO-STRIP-OFF-LY/WB
    SNAPSHOTS
    ATTACH-COMMMA-SUBJ-RELATIVE-TO-S
    SUBORD-CONJ
    START-POS
    DO-PAIRED-PUNCTUATION-INTERIOR
    DO-WORD-LEVEL-FSAS
    SUBSUMPTION-CHECK/COMPLETE
    NUMBER-OF-SPACES
    RUN-ISLAND-CHECKS-PASS-TWO
    DO-EXPLICIT-RULE-COMPLETION
    TOKENIZER-ENTRY
    DELIMIT-NEXT-CHUNK
    PRECEDING-DET-OR-PREP
    KRECLAIM
    CONTINUE-DIGIT-SEQUENCE-AFTER-COMMA
    EDGE-OVER-SEGMENT-SUFFIX
    END-OF-SEGMENT-MEASUREMENTS
    INSTALL-PRETERMINAL-EDGE
    PROPAGATE-SUFFIX-TO-SEGMENT
    HEAD-WORD-RULE-CONSTRUCTION-DISPATCH
    RESET-CATEGORY-COUNT
    PLURAL-VERSION
    ADJOIN-ASCOMP-TO-VG
    ONE-COLON-NS-PATTERNS
    LAMBDA-VARIABLE-NAMED
    NEXT-TOKEN
    VERB-NOUN-COMPOUND
    DOC-SET
    SNAPSHOT-PAIRS
    STARTING-EDGE-JUST-UNDER
    MASSAGE-REFERENT-SCHEMA
    BINDS
    REMOVE-EDGE-FROM-POSITION
    INITIALIZE-STATE-OF-CAPITALIZATION-FSA
    MULTIPLY-THROUGH-POSITIONS
    DT-BINDINGS
    CHAR/WB
    PUSH-LOOSE-ADVERB
    DA-RULE-CYCLE
    REINTERP-ITEM-USING-BINDINGS
    NORMAL-SEGMENT-FINISHED-OPTIONS
    FOLLOW-OUT-MATCHED-ARC
    NS-CATEGORY-FOR-REIFYING
    EDGE-FORM-ADJUSTMENT
    ATTACH-APPOSITIVE-NP-UNDER-S
    ADD-SUBSUMING-OBJECT-TO-DISCOURSE-HISTORY
    INTERPRET-IN-CONTEXT
    RIGHT-EDGE-FOR-REFERENT
    CREATE-PARTITIVE-NP
    PREVIOUS
    PARSE-FROM-TO/TOPMOST
    INTERPRET-ITEM-IN-CONTEXT
    RESET-DISPLAY-LINE-CHARS-REMAINING-COUNTER
    FUNCTION-WORD?
    RULE-FOR-EDGE-PAIR
    FIND-INDIVIDUAL
    INITIALIZE-CHART-STATE
    SDM-SPAN-SEGMENT
    SEGMENT-PARSED1
    MAKE-EDGE-OVER-LONG-SPAN
    DO-EDGE-LEVEL-FSAS
    GET-PUNCT-SYMBOL
    ENTRY-FOR-OUT-OF-BAND-CHARACTER
    CHECK-TT-AGAINST-ARC-SET
    BUMP-&-STORE-WORD
    CREATE-THATCOMP
    CONSIDER-MORPHOLOGY-BASED-EDGES
    FIND-LATTICE-SUBORDINATE
    FIRST-WORD-IS-BRACKET-PUNCT
    START-CAPITALIZATION-FSA/WORD-BUFFER
    ENSURE-EDGE-CONSISTENT-WITH-CHUNK
    OBJECT-VARIABLE
    RESOLVE-COLON-PATTERN
    TREETOPS-IN-CURRENT-CHUNK
    ASSESS-EDGE-LABEL
    COMPARE-TO-SNAPSHOTS
    GET-RESOURCE
    PROBABLY-NEW-UNARY-RULE?
    PRECEDED-BY-DIGIT-BASED-NUMBER
    ASSIMILATE-OBJECT
    RECOVER-ACRONYM-IF-NECESSARY
    FILTER-RULES-BY-LOCAL-COMPETITION
    V/R-VIOLATION
    FINISH-TOKEN
    REFERENTIAL-CATEGORY-P
    REFERENT-OF-TWO-CONJOINED-EDGES
    INTERPRET-PREMOD-TO-NP
    INDICATE-ARG
    SAFE-ITYPE-OF
    INITIALIZE-SENTENCE-RESOURCE
    SUBJECT-VARIABLE
    PREPOSITIONS
    MAKE-WORD-COLON-WORD-STRUCTURE
    ASSESS-RELEVANCE-PHRASES
    NG-HEAD?
    SUBCAT-LABEL
    HAS-A-BP-ID?
    PLURAL-VERSION/PW
    COMPLETE-EDGE/HUGIN
    FIND-OR-MAKE-LATTICE-DESCRIPTION-FOR-CAT-LIST
    SINGLE-LETTER-IS-AMINO-ACID
    RELEVANT-CATEGORY-FOR-DH
    RESOLVE-SYMBOL-TO-CATEGORY/CHECK
    RESOLVE-NS-PATTERN
    PUSH-INSTANTIATED-PATTERN-ELEMENT
    MULTIPLY-CATEGORIES
    BINDING-VARIABLE
    VARIABLE-DEFINED-ON-ONE-CATEGORY
    ESTABLISH-UNKNOWN-WORD
    ESTABLISH-RULE-SET-FOR
    APPLY-COPULAR-PP
    JUST-COVER-SEGMENT
    IDENTIFY-CURRENT-SENTENCE
    CALCULATE-CAPITALIZATION-OF-WORD/IN-BUFFER
    RESOLVE-STRING-TO-WORD/MAKE
    REMOVE-EDGE-FROM-VECTOR-EV
    BEST-TREETOP-RULE
    EXECUTE-ONE-DA-RULE
    ALL-MENTIONED-SPECIALIZATIONS
    NEXT-EDGE-FROM-RESOURCE
    SINGULAR-NOUN-AND-PRESENT-VERB?
    CONJOIN/2
    CATEGORY-OF-RIGHT-SUFFIX
    ENCODE-MENTION-LOCATION
    PACKAGE-QUALIFYING-PAIR
    COLLECT-NO-SPACE-SEGMENT-INTO-WORD
    IDENTIFY-RELATIONS
    SPAN-SQUARE-BRACKETS
    FIND-CHUNKS
    SUPER-CATEGORIES-OF
    MAYBE-CHECK-SEMANTIC-COMPLETENESS
    IDENTIFY-SALIENT-TEXT-STRUCTURE
    REFERENT-FROM-RULE
    NL->SPACE
    SHOW-PROTEIN-COERCION
    PREDICATION?
    MAKE-HYPHENATED-TRIPLE
    NEW-FOREST-DRIVER
    COLLECT-MODEL
    TERMINATE-CHART-LEVEL-PROCESS
    EV-POSITION
    STANDALONE-DA-EXECUTION
    MULTIPLY-EDGES
    IS-COLLECTION?
    LOWEST-EDGE
    DO-WORD-CANONICAL-FORM
    GET-VARIABLE-CATEGORY-PAIRS-FOR-VAR-NAME
    CHECK-FOR-RIGHT-EXTENSIONS
    OVERRIDE-LABEL
    ALLOCATE-A-RASHER-OF-INDIVIDUALS
    CHECK-RIGHT-EXTENSIONS/2
    STRIP-MODEL-DESCRIPTIONS
    IS-PRONOUN?
    ARE-ANY-LETTERS-CAPITALIZED
    TERMINALS-IN-SEGMENT
    FIND-CONSISTENT-EDGES
    ANALYSIS-CORE
    CHECK-FOR-PATTERN
    LOOKUP-UNARY-RULE
    ACCEPT-PATTERN
    CONJECTURES
    PW-WORD-CHAIN
    ASSESS-RELEVANCE-INTRO
    RECORD-DL-INSTANCE-WITHIN-SEQUENCE
    REMOVE-EDGE-FROM-CHART
    DECODE-VALUE-FOR-PRIMITIVE-V/R
    FIND-HEAD-WORD
    PARSE-AT-THE-SEGMENT-LEVEL
    INITIALIZE-SEGMENT-STATE-VARIABLES
    MAKE-RESIDUE-ON-PROTEIN
    DEFINE-INDIVIDUAL
    RESOLVE-PROTEIN-HYPHEN-WORD
    CONTINUE-DIGIT-SEQUENCE-AFTER-HYPHEN
    RUN-TREETOP-SNAPSHOT
    NOTE-NEW-FACT
    SUBSUMING-VARIANT
    TRY-SPANNING-CONJUNCTIONS
    MAKE-EDGE-OVER-DIGIT-SEQUENCE
    FIND-OR-MAKE-NEXT-PW-STATE
    TUCK-NEW-EDGE-UNDER-ALREADY-KNIT
    SENTENCE-PROCESSING-CORE
    IDENTIFY-CHUNKS
    NEW-DT
    EDGE-BETWEEN
    TOC-INDEX
    SORT-OUT-EDGES-IN-NS-REGION
    REF/METHOD
    ALLOCATE-INDIVIDUAL
    LAYOUT
    IS-MAXIMAL?
    CONTINUE-TOKEN
    ADD-ADJUNCTIVE-CLAUSE-TO-S
    RESOLVE-HYPHEN-BETWEEN-THREE-WORDS
    LEFT-EDGE-OF-TRIPLE
    LINK-IN-VERB+ING
    FIND-SELF-NODE
    RESOLVE-STRING-TO-WORD
    MAKE-BIO-PAIR
    CAPITALIZATION-FSA
    CHECK-ONE-ONE
    CHECK-FOR-COMPLETION-ACTIONS/WORD
    PUSH-POST-MVS-VERBS
    ATTACH-TO-COMP-COMMA-TO-S
    INITIALIZE-LINE-DATA
    LEFT-EDGE-FOR-REFERENT
    COLLECT-SUBCAT-STATISTICS
    PUNCTUATION?
    TEST-SUBCAT-RULE
    RESOLVE-REFERENT-EXPRESSION
    MAKE-NS-EDGE
    ASSIMILATE-THATCOMP
    REPLACE-ALL
    CLEAR-DH-GLOBALS
    MAKE-BIO-COMPLEX
    COLLECT-TRIPLES-IN-SEGMENT
    VERB-PHRASES
    KNIT-IN-SINGLE-TERM-REWRITE-RULE
    NEXT
    CATALOG/CFR
    INDIVIDUAL-FOR-REF
    CALCULATE-PROPERTIES-OF-WORDS-PNAME/IN-BUFFER
    DECODE-BINDING
    MAKE-BINARY-EDGE/EXPLICIT-RULE-COMPONENTS
    REALLY-KNOWN-WORD?
    FIND-VARIABLE-FOR-CATEGORY
    FIND-OR-MAKE-INITIAL-PW-STATE
    INITIALIZE-POSITION
    MAKE-SENTENCE-CONTAINER
    SATISFIES-SUBCAT-RESTRICTION?
    MULT/RIGHT-CATEGORY-LEFT-FORM_CATEGORY-ID
    HAVING-STRIPPED-Y-TRY-FOR-L
    INSTALL-TERMINAL-EDGES
    FITS-CRITERIA-FOR-SIMPLE-INDIVIDUALS
    CREATE-DISCOURSE-ENTRY
    PRECEDING-THAT-WHETHER-OR-CONJUNCTION?
    EV-NUMBER-OF-EDGES
    CONJOIN-CLAUSE-AND-VP
    RECORD-IRRELEVANT-SENTENCE
    TIDY-UP-SEGMENT-GLOBALS
    PATTERN-TRANSITION?
    REIFY-TWO-PART-LABEL
    RESOURCE-CLASS-NAME
    MAKE-HYPHENATED-STRUCTURE
    CORRESPONDING-OBO
    MAKE-CN-RULES/AUX
    CHART-BASED-ANALYSIS
    CHUNK-END-POS
    RESOLVE-HYPHEN-PATTERN
    NEXT-TREETOP/RIGHTWARD
    PRETERMINALS/WORD
    INTERPRET-TREETOPS-IN-CONTEXT
    |POSITION#|
    TAKE-BEST-SO-FAR
    CREATE-HOWCOMP
    FORM-IDS/RIGHTWARD
    COLLECT-SUPERCATEGORIES-OFF-LP
    STARTS-AT-POS
    DO-MULTIPLE-INITIAL/LEFT
    RESOLVE
    MAKE-SENTENCE-LAYOUT
    WALK-THROUGH-REFERENT-ACTIONS
    ASSIMILATE-NP-TO-V-AS-OBJECT
    GET-SCHEMATIC-WORD-RULE
    CLEAR-SWEEP-SENTENCE-TT-STATE-VARS
    ADD-SUBJECT-RELATION
    ANALYSIS-CORE-RETURN-VALUE
    GET-WORD-FOR-PREP
    RIGHT-TREETOP-AT
    DECODE-VARIABLE-NAME
    CHANGES-TO-KNOWN-RULE
    ATTACH-APPOSITIVE-NP-UNDER-PP
    TERMINALS-IN-SEGMENT/ONE-STRING
    INSTANTIATE-RULE-SCHEMA
    INDIV-BINDS
    MAKE-DEFAULT-BINARY-EDGE
    ARTICLES
    SUBCATEGORIZED-VARIABLE
    THERE-ARE-PREPOSITIONS?
    RUN-ISLAND-CHECKS
    SEGMENT-COVERAGE
    SPAN-ENDING-AT
    ADJG-HEAD?
    PER-ARTICLE-INITIALIZATIONS
    INDIV-TYPEP
    WORDS-BETWEEN
    INITIALIZE-SENTENCES
    PERIOD-HOOK
    IS-DL-CHILD?
    COMPLETE-ANY-SINGLE-TERM-EDGES
    REFERENT-OF-PARENTHETICAL-EXPRESSION
    SCAN-FOR-MORE-NUMBER-WORDS
    DO-POLYWORD-FSA
    REMOVE-NON-EDGES
    CHECK-MANY-ONE
    INITALIZE-MODEL-COLLECTION
    AFFIX-CHECKER
    INITIALIZE-RESOURCE
    ADD-PENDING-DEF-REF
    REPLACE-WITH-CANONICAL-REF-VARS
    DISPATCH-ON-UNARY-REF-ACTIONS
    REMAINING-FORMS
    ACTUAL-CHARACTERS-OF-WORD
    PRINC-POLYWORD
    TRY-TO-STRIP-OFF-ED/WB
    INDIVIDUAL-INHERITS-TYPE?
    CREATE-SHORT-CONJUNCTION-EDGE-IF-POSSIBLE
    CORPUS-BOUND-VARIABLE
    MULT/FORM-LABEL-LOOKING-LEFT
    HIGHEST-PRETERMINAL-AT
    SENTENCE-STRING
    PRETERMINALS-FOR-UNKNOWN
    PRINT-REF-CATEGORY-STRUCTURES
    NEW-SECTION-IN-ARTICLE
    CONTAINS-MOTIVATION-PHRASE
    RECORD-INFLECTIONS
    ASSIGN-BRACKET/EXPR
    SCAN-PATTERN-STARTING-PAIR-1
    CONJOIN-MULTIPLE-EDGES
    MAKE-EVENT-RELATION
    DO-FOREST-LEVEL
    COMPATIBLE-HEADS
    PULL-OUT-FIRST-SUBLIST
    CLEAN-OUT-HISTORY-AND-TEMP-OBJECTS
    MAKE-PREP-COMP
    METHODOLOGY
    TRY-MULT/LEFT-CATEGORY-RIGHT-FORM_CATEGORY-ID
    INITIATE-SUCCESSIVE-SWEEPS
    ALL-TTS
    RETRIEVE-SURFACE-STRING
    ALLOCATE-PARAGRAPH
    FIND-WORD
    RELEASE-EDGE-TO-RESOURCE
    CREATE-EVENT-NP-RELATION
    REPLACE-FROM-MAPPING
    CREATE-WHETHERCOMP
    NO-SPACE-BEFORE-WORD?
    BACKUP-TO-ANY-PENDING-ARC-SET
    INDIV-UID
    SET-ENTITIES
    INTERP-BIG-MECH-CHUNK
    STRIP-MODEL-DESCRIPTION
    LOOSE-ADJECTIVES
    SPACES-WORD?
    ASSESS-PARENTHESIZED-CONTENT
    TRY-EDGE-FSA
    ADDITIONAL-CATEGORIES-OF-ACTIVE-INDIVIDUALS
    REDUNDANT-EDGE
    REVISE-FORM-OF-NOSPACE-EDGE-IF-NECESSARY
    INTERPRET-ADVERB+VERB
    COMPATIBLE-WITH-CHUNK
    COLLECT-MODEL-DESCRIPTION
    SENTENCE-SWEEP-LOOP
    HIGHEST-EDGE
    SAFE-ITYPEP
    MULT/CHECK-FORM-OPTIONS
    PATTERN-SWEEP
    INTERPRET-TO-COMP-ADJUNCT-TO-S
    EDGE-ENDING-AT
    APOSTROPHE-FSA
    LOOKUP-MATCHED-TT
    SEGMENT-RULE-CHECK
    SEARCH-WORD-FOR-FSAS
    RULE-FORMS
    SOME-WORD-IS-A-SALIENT-HYPHENATED-LITERAL
    PRINC-WORD
    RESOLVE-SYMBOL-TO-CATEGORY
    IS-THE-SECOND-LETTER-CAPITALIZED
    HAS-DEFINITE-DETERMINER?
    DO-ANY-CATEGORY-FSAS
    PUSH-PARENTHESES
    INSTALL-CONTENTS
    DEFINE-CFR
    GET-SURFACE-STRING-FOR-INDIVIDUAL
    DECODE-CATEGORY-SPECIFIC-BINDING-INSTR-EXPS
    INTERPRET-VAL-IN-CONTEXT
    INDIVIDUALS-UNDER
    COMPATIBLE-EDGE-FORM?
    INDICATE-HEAD
    EXACT-TITLE-OF-CURRENT-SECTION-IS
    INTERPRET-AS-PATHWAY-OR-COMPLEX
    DO-RELATION-BETWEEN-FIRST-AND-SECOND
    NP-OVER-THAT?
    REF/SUBTYPE
    PARSE-CHUNK-INTERIOR
    COMPATIBLE-HEAD?
    NUMBER-OF-SPACES-NAMED
    RIGHT-TREETOP-EDGE-AT
    FIND-EDGES-INSIDE-MATCHING
    KNIT-PARENS-INTO-NEIGHBOR
    LINK-TO-EXISTING-CHILDREN
    NEXT-TREETOP/LEFTWARD
    REIFY-NS-NAME-AND-MAKE-EDGE
    CREATE-EVENT-RELATION
    COMPOSE-WH-WITH-VP
    MAKE-VG-AUX
    KNOWN-NO-EDGE-PATTERN
    SET-USED-BY
    STARTING-FORMS
    REIFY-RESIDUE
    CLEAR-UNHANDLED-UNKNOWN-WORDS
    NP-CONTAINING-EDGE?
    SUBCAT-INSTANCE
    FIND/INDIVIDUAL
    CREATE-ENTRY-IN-DISCOURSE-HISTORY
    ALL-EDGES-ON
    POTENTIAL-SPECIALIZATIONS
    LEFT-TREETOP-AT/EDGE
    TERMINATE-SCAN-PATTERN-SEARCH
    REFERENT-OF-RIGHT-SUFFIX
    ABSORB-AUXILIARY
    CONJUNCTION-HEURISTICS
    PUSH-LOOSE-ADJECTIVE
    SCAN-NEXT-POSITION
    SET-INDIV-BINDS
    MAKE-CHART-EDGE
    INTERPRET-PP-AS-HEAD-OF-NP
    INCLUDED-PRONOUNS
    LITERAL-EDGE?
    WORDS-TO-COUNT
    HAS-A-NAME?
    RUN-TOKEN-FSA
    SWEEP-TO-END-OF-NS-REGIONS
    CONTAINS-METHODOLOGY-PHRASE
    MAKE-EDGE-FOR-POLYWORD
    POSITION-ALREADY-HAS-WHITESPACE
    SCHR-RELATION
    POPULATE-WORD-LOOKUP-BUFFER/STRING
    PTS
    INITIALIZE-CONTEXT-VARIABLES
    WORDS-IN-STRING
    NARY-RULE
    POST-ANALYSIS-OPERATIONS
    KNIT-EDGE-INTO-POSITION
    EDGE-OVER-PUNCTUATION?
    PRECEDING-ADVERB
    PROCESS-ACCEPTED-SCAN-PATTERN/S
    GET-NEXT-TREETOP
    BEGIN-NEW-PARAGRAPH
    TRAVERSAL-ACTION
    POLYWORD-NAMED
    MULTIPLY-LABELS
    APPLY-REDUCED-RELATIVE-CLAUSE
    CATEGORY-IDS/LEFTWARD
    ADD-TERMINAL-TO-CHART
    ADD-PENDING-PARTITIVE
    FORM-RULE-COMPLETION
    FIND-OR-MAKE-NUMBER
    INITIALIZE-ALL-EDGES-STATE-VARS
    CATALOG/WORD
    DA/LOOK-UNDER-EDGE/RIGHTWARDS
    SET-MAIN-VERB
    WHERE-TT-ENDS
    SPAN-DIGITS-NUMBER
    BEST-HEAD
    RESOLVE-HYPHEN-BETWEEN-TWO-WORDS
    SHORT-CONJUNCTIONS-SWEEP
    SUCESSIVE-SWEEPS?
    FAILED-PP-ATTACHMENT
    PENDING-DEF-REFERENCES
    ALLOCATE-ARTICLE
    SEGMENT-FINISHED
    FASL-FILE
    CHECK-RULE-RESULT-FORM-AGAINST-CHUNK
    UNPACK-SUBJECT-CONTROL
    DO-SINGLE/LEFT
    CARRY-OUT-ACTIONS
    ALL-INSTANCES
    CONTAINS-CONJECTURE-PHRASE
    REIFY-RESIDUE-AND-MAKE-EDGE
    MOTIVATION
    ATTACH-APPOSITIVE-NP-TO-NP
    NOTE-FILE-LOCATION
    SPEC-MENTIONS
    CATEGORY-MULTIPLIER
    STRIP-MODEL-DESCRIPTION1
    PUSH-CONJUNCTION
    SPECIAL-COLLECTION-INTERP
    CONTENTS
    ASSIGN-BRACKETS-AS-A-COMMON-NOUN
    EDGE-INTRODUCES-BRACKETS
    LEVEL-COMPLETED
    CONTAINED-EDGE?
    RELEVANT-MENTION
    NEXT-ID
    CLEAR-STACK-OF-PENDING-LEFT-OPENERS
    DOC-INDEX
    HAS-BEEN-STATUS?
    SF-ACTION/SPANNED-SEGMENT1
    VARIABLE/CATEGORY
    CREATE-DISCOURSE-MENTION
    MAKE-PP
    SUPER-CATEGORY-HAS-VARIABLE-NAMED
    REDEFINITION-OF-RULE
    SECOND-IMPOSES-RELATION-ON-FIRST?
    TREETOPS-IN-SEGMENT
    MARK-INSTANCE-OF-AND
    TOP-EDGE-STARTING-AT
    INITIALIZE-PARAGRAPH-RESOURCE
    PRINT-INDIVIDUAL-WITH-NAME
    EXECUTE-ONE-ONE-RULE
    LOOK-FOR-NUMBER-RULE-IN-LIST-OF-CFRS
    GET-REF-SUBCATEGORIZATION
    FOM-LATTICE-DESCRIPTION
    DECODE-EXP-AS-REF-CATEGORY
    THERE-ARE-PARENTHESES?
    MAKE-SIMPLE-INDIVIDUAL
    CONTINUE-DIGIT-SEQUENCE-AFTER-PERIOD
    SEMTREE
    ITYPEP
    DO-NO-SPACE-COLLECTION
    LOOKUP-THE-KIND-OF-CHART-PROCESSING-TO-DO
    STRING-OF-WORDS-BETWEEN
    START-SENTENCE
    PULL-OUT-SUB-REFERENT-EXPRESSION
    TRY-COMBINATION-TO-THE-LEFT/BOUNDED
    FILL-WHITESPACE-AND-LOOP
    ATTACH-LEADING-PP-TO-CLAUSE
    DISPATCH-OFF-CAPITALIZATION-DATA
    DISTRIBUTE-PP-TO-CONJOINED-CLAUSES
    ANNOTATE-NUMBER
    TOKEN-STRINGS-IN-STRING
    UPDATE-DISCOURSE-HISTORY
    CONSTRUCT-CFR
    RELEVANT-EDGES
    RECLAIM-ALL-INSTANCES
    COMPOSE-SALIENT-HYPHENATED-LITERALS
    CONJUNCTION-INCOMPATIBLE-LABELS
    LINK-IN-VERB
    CATALOG/POLYWORD
    NOTE-KNOWN-RESULT
    LOOSE-NPS
    POS-EV-ENDS-AT
    DECODE-LIST-REFERENT-EXPRESSION
    START-AFFIX-STRIPPER/WORD-BUFFER
    SET-SENTENCE-SUBJECT
    END-OF-SENTENCE-PROCESSING-CLEANUP
    EARLIER?
    MAKE-SUBORDINATE-CLAUSE
    MAKE-HYPHENATED-PAIR
    SET-CONTEXT-VARIABLE
    REFERENT-OF-LIST-OF-CONJOINED-EDGES
    REAP-INDIVIDUALS
    CAN-START?
    CONSTRUCT-REFERENT
    PNAME-FOR
    RECLAIM-TEMPORARY-INDIVIDUALS
    COLLECTION-PRINT-ROUTINE
    NS-AMINO-PATTERN-RESOLVE
    MAKE-BIO-COMPLEX-WITH-HYPHEN
    ESTABLISH-PROPERTIES-OF-NEW-DIGIT-SEQUENCE
    RESOLVE-INITIAL-STRANDED-HYPHEN
    MAKE-COMPLETED-UNARY-EDGE
    CONJ-INFO
    COMPOSED-BY-USABLE-RULE
    ADJG-COMPATIBLE?
    ASSIMILATE-SUBJECT
    LOOK-FOR-SHORT-OBVIOUS-CONJUNCTIONS
    PP
    DEFINE-CFR/RESOLVED
    PBB-SINGLE-RIGHT/LOOKING-LEFT
    MAX-EDGE?
    PULL-OUT-NEXT-SUBLIST
    ARE-THE-REST-CAPITALIZED
    NEXT-TERMINAL
    REF-TYPE
    DEAL-WITH-UNHANDLED-UNKNOWN-WORDS-AT
    EXTRACT-CHARACTER-BETWEEN-POSITIONS
    REF/HEAD
    NOT-ALL-SAME-CHARACTER-TYPE
    ADJACENT-TT-PAIRS
    PUSH-VERB-PHRASE
    HANDLE-PERIOD-AS-INITIAL
    PROCESS-ACCEPTED-SCAN-PATTERN
    REMOVE-SURPLUS-LITERAL-COMPOSITIONS
    DA/LOOK-UNDER-EDGE
    FIND-VARIABLE-FROM-INDIVIDUAL
    FIND-VAR-FROM-VAR/NAME
    ALLOCATE-A-RASHER-OF-CONS-CELLS
    REF/INSTANTIATE-INDIVIDUAL-WITH-BINDING
    SETUP-MULTIPLE-INITIAL-EDGES
    EXECUTE-DA-ACTION
    APPLY-SUBJECT-RELATIVE-CLAUSE
    SCAN-PATTERN-STARTING-PAIR
    CONTINUATION-FROM-STATE/S?
    MAYBE-SUPPRESS-DAUGHTERS-DH-ENTRY
    EDGE-OVER-SEGMENT-HEAD
    INITIALIZE-ARTICLE-RESOURCE
    SUBSUMES-MENTION
    VERB-CATEGORY?
    DEFINE-POLYWORD/EXPR
    SWEEP-TO-SPAN-PARENTHESES
    MULTIPLY-THROUGH-TERMS-OF-RHS
    ANNOTATE-SITE-BOUND-TO
    FORM-IDS/LEFTWARD
    FIND-SUBCAT-PATTERN
    MARCH-BACK-FROM-THE-RIGHT/SEGMENT
    ASSIMILATE-SUBCAT
    INTERPRET-IN-VIVO-VITRO
    VALUE-OF
    PUSH-SUBORDINATE-CONJUNCTION
    RELEVANT-TYPE-OF-INDIVIDUAL
    MULT/FORM-LABEL-LOOKING-RIGHT
    EXECUTE-SCHEMATIC-DA-ACTION
    FIND-VARIABLE-IN-MIXINS
    ADJUDICATE-SPECIALIZATIONS
    PENDING-PARTITIVE-REFERENCES
    INTERPRET-FOR-TO-COMP
    POSITION-BEFORE-SEGMENT-FINAL-MULTI-WORD-EDGE
    MAKE-TRIVIAL-SATURATED-INDIVIDUAL
    INTERPRET-TO-COMP-ADJUNCT-TO-NP
    POP-TOPMOST-EDGE
    CHECK-FOR-EITHER-FORM-RULE
    NUMBER-NOUN-COMPOUND
    ALL-SUBS-LINK
    NAME-OF-INDIVIDUAL
    RESOLVE-OTHER-PUNCTUATION-PATTERN
    INITIALIZE-BY-CURRENT-STYLE
    NEW-FACTS
    BIND-CONTEXT-AND-APPLY-DA-FUNCTION-ACTION
    1ST-PRETERMINAL-AT
    REIFY-NS-NAME-AS-BIO-ENTITY
    MAKE-CN-PLURAL-RULE
    VG-COMPATIBLE?
    FIND-OR-MAKE-INDIVIDUAL
    DECODE/CHECK-VALUE
    PUSH-PRONOUN
    MAKE-CN-RULES/AUX/PLURAL
    DIGIT-FSA
    EDGE-OVER-SEGMENT
    ADD-TENSE/ASPECT
    REIFY-POINT-MUTATION-AND-MAKE-EDGE
    CAPITAL-LETTER
    MAKE-POINT-MUTATION
    ANNOTATE-REALIZATION-PAIR
    TRIE-FOR-1ST-ITEM
    IDENTIFY-PREPOSITION
    NG-COMPATIBLE?
    INITIALIZE-DA-ACTION-GLOBALS
    INITIALIZE-DOCUMENT-ELEMENT-RESOURCES
    MENTION-NON-DLI-MODIFIERS
    LOOKUP/CFR
    ASSESS-RELEVANCE
    INITIALIZE-EDGE-RESOURCE
    EXECUTE-TRIPLE
    RESOLVE/MAKE
    SEARCH-FOR-LIST-CONJUNCTION
    ITYPE-OF
    FORM-RULE?
    REIFY-STATE-OF-CAPITALIZATION-FSA
    DLI-REF-CAT
    NOUN-CATEGORY?
    PACKAGE-APPROXIMATION-NUMBER
    TRY-TO-EXTEND-SCAN-PATTERN
    NS-PROTEIN-PATTERN-RESOLVE
    CHECK-LEFT-FOR-FORM-RULE
    SCAN-TERMINALS-LOOP
    VALID-RULE?
    NO-EDGE-OVER-SEGMENT-HEAD
    BIND-DLI-VARIABLE
    REINTERP-LIST-USING-BINDINGS
    FIND-OR-MAKE/INDIVIDUAL
    RIGHT-TREETOP-AT/EDGE
    DEFINE-WORD/EXPR
    MAKE-RULES-FOR-RDATA
    MAKE-NUMBER-OR-WORD-COLON-STRUCTURE
    SPACED-LIST
    SEG-BEFORE-CONJOINS
    COMPATIBLE-EDGE?
    COPY-INDIVIDUAL
    INITIALIZE-SECTION-RESOURCE
    POSITION-IS-BETWEEN
    CAPITALIZED-CORRESPONDENT1
    DECODE-HEAD
    SET-SCHEMA-AND-RHS-FORMS
    SAVE-MISSING-SUBCATS
    GET-SENTENCE-CORPUS
    MAKE-EDGE-OVER-LITERAL
    CONSTRUCT-TEMPORARY-NUMBER
    PUNCTUATION-TERMINATES-NO-SPACE-SEQUENCE
    MAKE/INDIVIDUAL
    MAKE-CN-RULES
    ANNOTATE-DAUGHTER
    MAKE-COMPLETED-BINARY-EDGE
    CHECK-IMPACT-ON-QUIESCENCE-POINTER
    DO-PUNCTUATION-FROM-CONTINUE
    GEN-CFR-SYMBOL
    EDGE-STRING
    DELETE-EXISTING-BRACKET-ASSIGNMENTS
    INITIALIZE-SECTIONS
    CONTINUE-FROM-SDM/ANALYZE-SEGMENT
    INITIALIZE-TOKENIZER-STATE
    WORD-NEVER-IN-NS-SEQUENCE
    UPDATE-INSTANCE-WITHIN-SEQUENCE
    DECODE-BRACKET
    COMPLETE
    COLLECT-TRIPLES-WITH-EDGES-OVER-ONE-WORD
    SENTENCE
    EXTEND-ENTRY-IN-DISCOURSE-HISTORY
    SPACED-STRING
    MAKE-MENTION
    MAKE-NUMBER-COLON-NUMBER-STRUCTURE
    CONJOIN-TWO-EDGES
    COMPATIBLE-FORM
    ISLAND-DRIVEN-FOREST-PARSE
    RESPAN-EDGE-AROUND-ONE-WORD
    MAKE-NEW-MENTION
    KNOWN-PRETERMINALS/CHECK-CAPS
    NEWLINE-FSA
    UNARY-RULE?
    ASSIGN-BRACKETS/EXPR
    DISPATCH-ON-RULE-FIELD-KEYS
    PRINT-INDIVIDUAL-STRUCTURE
    LOOKUP/MAKE-WORD-SYMBOL
    VG-HAS-ADVERB-VARIABLE?
    FIND-OR-MAKE-LATTICE-SUBORDINATE
    CONSTRUCT-FSA-FOR-PW
    MARK-BEST-SO-FAR
    MAKE-AMINO-COLLECTION
    INITIATE-SCAN-PATTERN-DRIVER
    DESIGNATE-BUFFER-REFILLING-ROUTINE
    TAKES-PREPOSITION?
    INDEFINITE-DETERMINER?
    NOTE-GRAMMAR-MODULE
    LOOK-FOR-DA-PATTERN
    MARK-OPEN-SQUARE-BRACKET
    INITIALIZE-PARAGRAPHS
    MARCH-BACK/SEGMENT/2
    EDGE-LENGTH
    COMPLETE-WORD/HUGIN
    KEYWORD-FOR-WORD
    CHILDREN
    WORD-IS-BRACKET-PUNCT
    SORT-OUT-RESULT-OF-NEWLINE-ANALYSIS
    PUNCTUATION-FINAL-IN-NS-SPAN?
    WORD-RULES
    CLEAR-INSTANTIATED-SCAN-PATTERN-ELEMENT-ARRAY
    LOOKUP-PASSIVE-COUNTERPART
    CATEGORY-IDS/RIGHTWARD
    EV-TOP-NODE))

#+:sbcl
(defun timings(&optional (n 1))
  (setq *profns* *sp-fns*)
  (eval `(sb-profile::profile ,@*profns*))
  (setq *allow-tr-tracing* nil)
  (loop for i from 1 to n do
    (compare-to-snapshots))
  (sb-profile:report))

(defparameter *nht* (make-hash-table :test #'eql))
(defparameter *vht* (make-hash-table :test #'eq))
(defparameter *lht* (make-hash-table :test #'equal))
(defparameter *val* nil)
(defparameter *name-variables* (find-variable 'name))

(defun make-dummy-v+v()
  (let* ((v+v (allocate-v+v))
         (v (cdr (nth (unit-plist v+v) *name-variables*)))
         (value (car (nth (unit-plist v+v) *name-variables*))))
    (setf (vv-variable v+v) v)
    (setf (vv-value v+v) value)
    (setf (var-v+v-table v)
          (push `(,value . ,v+v) 
                (var-v+v-table v)))
    (tr :made-v+v v+v)
    v+v))

(defparameter *vvs* (loop for i from 1 to 20 collect (make-dummy-v+v)))
#|
(setq vk (fifth *vvs*))
(setq nk (unit-plist vk))
(setq lk (list (vv-variable vk)(vv-value vk)))
|#

(defun load-vv-tables ()
  (loop for vv in *vvs* do
    (setf (gethash (unit-plist vv) *nht*) vv)
    (setf (gethash vv *vht*) (unit-plist vv))
    (setf (gethash (cons (vv-value vv)(vv-variable vv)) *lht*) vv)
    (setf (getf *val* vv) (unit-plist vv))))

(defparameter *rr* nil)

(defun ht (n key ht)
  (loop for i from 1 to n do (setq *rr* (gethash key ht))))

(defun htnull (n key ht)
  (declare (ignore key ht))
  (loop for i from 1 to n do (setq *rr* (cons n n))))

(defun vt (n key)
  (loop for i from 1 to n do (setq *rr* (getf *val* key))))

#|? 
time (ht 10000 nk *nht*))
;Compiler warnings :
;   In an anonymous lambda form at position 16: Undeclared free variable NK
(HT 10000 NK *NHT*)
took   630 microseconds (0.000630 seconds) to run.
During that period, and with 8 available CPU cores,
     1,301 microseconds (0.001301 seconds) were spent in user mode
         9 microseconds (0.000009 seconds) were spent in system mode
NIL
? (time (ht 10000 lk *lht*))
;Compiler warnings :
;   In an anonymous lambda form at position 16: Undeclared free variable LK
(HT 10000 LK *LHT*)
took 3,371 microseconds (0.003371 seconds) to run.
During that period, and with 8 available CPU cores,
     7,330 microseconds (0.007330 seconds) were spent in user mode
        47 microseconds (0.000047 seconds) were spent in system mode
 752 bytes of memory allocated.
NIL
? (time (vt 10000 vk))
;Compiler warnings :
;   In an anonymous lambda form at position 16: Undeclared free variable VK
(VT 10000 VK)
took   913 microseconds (0.000913 seconds) to run.
During that period, and with 8 available CPU cores,
     1,897 microseconds (0.001897 seconds) were spent in user mode
        21 microseconds (0.000021 seconds) were spent in system mode
NIL


|#



(defun parse-sentence-carefully (sent-string)
  (let ((*trap-error-skip-sentence* t))
    (declare (special *trap-error-skip-sentence*))
    (let* ((length (length sent-string)))
      (unless (eql #\. (char sent-string (1- length)))
        (setq sent-string (string-append sent-string ".")))
      (establish-character-source/string sent-string)
      (if *trap-error-skip-sentence*
          (handler-case
              (analysis-core)
            (error (e)
                   (ignore-errors ;; got an error with something printing once
                    (format t "~&parse-sentence-carefully -- Error in ~s~%~a~%~%" (current-string) e))))
          (analysis-core)))))

(defun ras2-sentence (s)
  (with-total-quiet
      (when
          (parse-sentence-carefully s)
        (loop for i in (second (car *all-sentences*))
          thereis (and (individual-p i)(itypep i 'protein)(value-of 'ras2-model i))))))

(defun all-bind-prots (i)
  (loop for bb in (indiv-binds i)
    when (and
          (memq (var-name (binding-variable bb)) '(bindee direct-bindee binder))
          (value-of 'name (binding-value bb)))
    collect (binding-value bb)))

(defun all-prots (a)
  (loop for i in (second a) when (and (individual-p i)
                                      (or (itypep i 'protein)(itypep i 'protein-family))
                                      (value-of 'name i))
    collect i))

(defun bind-and-prots ()
  (loop for a in *all-sentences* 
    append
    (loop for i in (second a)
      when (and (individual-p i)(itypep i 'binding))
      collect (list i (all-bind-prots i)(all-prots a) (car a)))))

(defun bind-and-bio-entity ()
  (declare (special category::bio-entity))
  (loop for a in *all-sentences* 
    append
    (loop for i in (second a)
      when (and (individual-p i)
                (itypep i 'binding)
                (loop for ii in (all-bind-prots i) thereis (eq (itype-of ii) category::bio-entity)))
      collect (list i (all-bind-prots i)(all-prots a) (car a)))))

(defun all-bio-entities ()
  (declare (special category::bio-entity))
  (loop for a in *all-sentences* 
    append
    (loop for i in (second a)
      when (and (individual-p i)(eq (itype-of i) category::bio-entity))
      collect i)))
  
(defun test-bind-sents ()
  (declare (special bind-sents))
  (load-pmc-sent-lists)
  (loop for i from 1 to 3000 as s in bind-sents do (eval `(with-total-quiet (epp ,s)))))

(defun ras2-proteins-in-sentences (&optional (with-sentence? t))
  (loop for a in *all-sentences*
    append
    (loop for i in (second a)
      when (and (individual-p i)(itypep i 'protein) (in-ras2-model? i))
      collect
      (if
       with-sentence?
       (list i (car a))
       i))))

(defun show-sentences ()
  (np (reverse (mapcar #'first *all-sentences*))))

(defun r2-proteins-in (n)
  (run-june-articles 1 :from-article (- n 1))
  (let
      ((r2p (ras2-proteins-in-sentences)))
    (if r2p
        (np r2p)
        (show-sentences))))
      

