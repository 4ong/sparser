;;; -*- Mode: Lisp; Syntax: COMMON-LISP; Package: MUMBLE -*-
;;; Copyright (c) 2016 SIFT LLC. All Rights Reserved.

(in-package :mumble)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (use-package :rt))

(defvar *me*
  (mumble-value 'first-person-singular 'pronoun))

(defun mumble-says (content)
  (with-output-to-string (*mumble-text-output*)
    (say content)))

(deftest (say nil)
  (mumble-says nil)
  "")

(deftest (say cat)
  (mumble-says (find-word "cat"))
  "cat")

(deftest (say cats)
  (mumble-says (plural (make-dtn :resource (noun (find-word "cat")))))
  "cats")

(deftest (say mice)
  (mumble-says (plural (make-dtn :resource (noun "mouse"))))
  "mice")

(deftest (say snap bone)
  (let ((s *me*)
        (v (present-tense (make-dtn :resource (verb "snap"))))
        (o (always-definite (make-dtn :resource (noun "bone")))))
    (make-complement-node 's s v)
    (make-complement-node 'o o v)
    (mumble-says v))
  "I snap the bone")

(deftest (say snapped bone)
  (let ((s *me*)
        (v (past-tense (make-dtn :resource (verb "snap"))))
        (o (initially-indefinite (make-dtn :resource (noun "bone")))))
    (make-complement-node 's s v)
    (make-complement-node 'o o v)
    (mumble-says v))
  "I snapped a bone")

(deftest (say not drink milk)
  (let ((s *me*)
        (v (negate (present-tense (make-dtn :resource (verb "drink")))))
        (o (make-dtn :resource (noun "milk"))))
    (make-complement-node 's s v)
    (make-complement-node 'o o v)
    (mumble-says v))
  "I don't drink milk")

(deftest (say not drank milk)
  (let ((s *me*)
        (v (negate (past-tense (make-dtn :resource (verb "drink")))))
        (o (make-dtn :resource (noun "milk"))))
    (make-complement-node 's s v)
    (make-complement-node 'o o v)
    (mumble-says v))
  "I didn't drink milk")

(deftest (say bought milk)
  (let ((s *me*)
        (v (past-tense (make-dtn :resource (verb (find-word "buy")))))
        (o (make-dtn :resource (noun "milk"))))
    (make-complement-node 's s v)
    (make-complement-node 'o o v)
    (mumble-says v))
  "I bought milk")

(deftest (ask bought milk)
  (let ((s *me*)
	(v (question (past-tense (make-dtn :resource (verb (find-word "buy"))))))
	(o (make-dtn :resource (noun "milk"))))
    (make-complement-node 's s v)
    (make-complement-node 'o o v)
    (mumble-says v))
  "did I buy milk")

(deftest (say buy and like)
  (let* ((s1 *me*)
	 (v1 (negate (present-tense (make-dtn :resource (verb "drink")))))
	 (o1 (make-dtn :resource (noun "milk")))
	 (s2 *me*)
	 (v2 (present-tense (make-dtn :resource (verb "like"))))
	 (o2 (plural (make-dtn :resource (noun "cat"))))
	 (conjunction (phrase-named 'two-item-conjunction))
	 (dtn (make-dtn :referent `(,v1 ,v2)
			:resource conjunction)))
    (make-complement-node 's s1 v1)
    (make-complement-node 'o o1 v1)
    (make-complement-node 's s2 v2)
    (make-complement-node 'o o2 v2)
    (make-complement-node 'one v1 dtn)
    (make-complement-node 'two v2 dtn)
    (mumble-says dtn))
  "I don't drink milk and I like cats")

#+(or)
(deftest (say bought read book)
  (let* ((s1 *me*)
	 (v1 (past-tense (make-dtn :resource (verb (find-word "buy")))))
	 (o1 (initially-indefinite (make-dtn :resource (noun "book") :referent :b1)))
	 (s2 *me*)
	 (v2 (past-tense (make-dtn :resource (verb (find-word "read")))))
	 (o2 (known-individual (make-dtn :resource (noun "book") :referent :b1)))
	 (conjunction (phrase-named 'two-item-conjunction))
	 (dtn (make-dtn :referent `(,v1 ,v2)
			:resource conjunction)))
    (make-complement-node 's s1 v1)
    (make-complement-node 'o o1 v1)
    (make-complement-node 's s2 v2)
    (make-complement-node 'o o2 v2)
    (make-complement-node 'one v1 dtn)
    (make-complement-node 'two v2 dtn)
    (say dtn))
  "I bought a book and I read it")

#+(or)
(deftest (say love myself)
  (let ((s *me*)
	(v (present-tense (make-dtn :resource (verb "love"))))
	(o *me* ))
    (make-complement-node 's s v)
    (make-complement-node 'o o v)
    (mumble-said v))
  "I love myself")
